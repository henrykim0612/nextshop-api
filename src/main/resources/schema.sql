CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    name VARCHAR(100),
    phone VARCHAR(30),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT uq_user_email UNIQUE (email)
);

INSERT INTO users (email, password, name, phone)
VALUES ('admin@gmail.com', '$2a$10$14Jog3VzjF/X1H.bh4mjIOdYcmdzw17PgAIS8u05wkJZNwXF/FvjS', 'Master Kim', '010-9999-9999');

CREATE TABLE authorities (
	id VARCHAR(15) PRIMARY KEY,
	description VARCHAR(30) NOT NULL,
	CONSTRAINT ck_authority_id CHECK (id IN ('ROLE_USER', 'ROLE_ADMIN'))
);

INSERT INTO authorities(id, description) VALUES('ROLE_USER', '사용자 권한');
INSERT INTO authorities(id, description) VALUES('ROLE_ADMIN', '관리자 권한');

CREATE TABLE user_authorities(
	user_id BIGINT NOT NULL,
	authority_id VARCHAR(15) DEFAULT 'ROLE_USER' NOT NULL,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT pk_user_authorities PRIMARY KEY (user_id, authority_id),
	CONSTRAINT fk_ua_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
	CONSTRAINT fk_ua_authority FOREIGN KEY (authority_id) REFERENCES authorities(id) ON DELETE RESTRICT
);

INSERT INTO user_authorities (user_id, authority_id) VALUES (1, 'ROLE_USER');
INSERT INTO user_authorities (user_id, authority_id) VALUES (1, 'ROLE_ADMIN');

CREATE TABLE categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR(20) NOT NULL,
    CONSTRAINT uq_category_name UNIQUE (category_name),
    CONSTRAINT ck_category_name CHECK (category_name IN ('WOMEN', 'MEN'))
);

INSERT INTO categories (category_name) VALUES ('WOMEN'), ('MEN');

CREATE TABLE products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_id BIGINT NOT NULL,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    description VARCHAR(2000),
    color VARCHAR(100),
    size VARCHAR(100),
    features VARCHAR(1000),
    care VARCHAR(1000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_product_category
        FOREIGN KEY (category_id) REFERENCES categories(id)
);

CREATE TABLE product_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT NOT NULL,
    image_url VARCHAR(1000) NOT NULL,
    alt_text VARCHAR(255),
    sort_order INT DEFAULT 0 NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_image_product
        FOREIGN KEY (product_id) REFERENCES products(id)
        ON DELETE CASCADE,
    CONSTRAINT uq_product_image_order UNIQUE (product_id, sort_order)
);

CREATE TABLE carts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_cart_user
        FOREIGN KEY (user_id) REFERENCES users(id)
        ON DELETE CASCADE,
    CONSTRAINT uq_cart_user UNIQUE (user_id)
);

CREATE TABLE cart_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cart_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    price_at_add DECIMAL(12,2) NOT NULL, -- 담을 당시 가격(스냅샷 용도)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_cart_item_cart
        FOREIGN KEY (cart_id) REFERENCES carts(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_cart_item_product
        FOREIGN KEY (product_id) REFERENCES products(id),
    CONSTRAINT uq_cart_product UNIQUE (cart_id, product_id)
);

INSERT INTO products (category_id, name, price, description, color, size, features, care)
SELECT c.id,
       CONCAT('WOMEN Product ', SEQ),
       ROUND(50000 + (RAND() * 50000), 2),
       CONCAT('Description for WOMEN product ', SEQ),
       CASE MOD(SEQ, 5)
           WHEN 0 THEN 'Red'
           WHEN 1 THEN 'Blue'
           WHEN 2 THEN 'Black'
           WHEN 3 THEN 'White'
           ELSE 'Beige'
       END,
       CASE MOD(SEQ, 4)
           WHEN 0 THEN 'S'
           WHEN 1 THEN 'M'
           WHEN 2 THEN 'L'
           ELSE 'XL'
       END,
       'Lightweight, comfortable, durable',
       'Hand wash cold or dry clean'
FROM categories c,
     SYSTEM_RANGE(1, 5) AS T(SEQ)
WHERE c.category_name = 'WOMEN';


INSERT INTO products (category_id, name, price, description, color, size, features, care)
SELECT c.id,
       CONCAT('MEN Product ', SEQ),
       ROUND(60000 + (RAND() * 60000), 2),
       CONCAT('Description for MEN product ', SEQ),
       CASE MOD(SEQ, 5)
           WHEN 0 THEN 'Gray'
           WHEN 1 THEN 'Navy'
           WHEN 2 THEN 'Black'
           WHEN 3 THEN 'Khaki'
           ELSE 'White'
       END,
       CASE MOD(SEQ, 4)
           WHEN 0 THEN 'S'
           WHEN 1 THEN 'M'
           WHEN 2 THEN 'L'
           ELSE 'XL'
       END,
       'Breathable, flexible, modern fit',
       'Machine wash cold or dry clean'
FROM categories c,
     SYSTEM_RANGE(1, 5) AS T(SEQ)
WHERE c.category_name = 'MEN';


INSERT INTO product_images (product_id, image_url, alt_text, sort_order)
SELECT p.id,
       CONCAT('http://localhost:8080/images/', p.id, '_', img.seq, '.png'),
       CONCAT(p.name, ' image ', img.seq),
       img.seq
FROM products p,
     SYSTEM_RANGE(1, 3) AS img(seq);

     
-- 리뷰 데이터를 많이 만들기 위해 일부로 테이블 관계 해제
CREATE TABLE reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT NOT NULL,
    reviewer_name VARCHAR(50) NOT NULL,
    rating INT NOT NULL,
    content VARCHAR(2000) NOT NULL,
    avatar_url VARCHAR(1000) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_review_product
        FOREIGN KEY (product_id) REFERENCES products(id)
        ON DELETE CASCADE,
    CONSTRAINT ck_review_rating CHECK (rating BETWEEN 1 AND 5)
);


INSERT INTO reviews (
    product_id,
    reviewer_name,
    rating,
    content,
    avatar_url,
    created_at
)
SELECT
    p.X AS product_id,
    -- reviewer_name: 랜덤 영어 이름 생성
    CONCAT(
        CASE MOD(n.X, 10)
            WHEN 0 THEN 'Alex'
            WHEN 1 THEN 'Olivia'
            WHEN 2 THEN 'Mason'
            WHEN 3 THEN 'Emma'
            WHEN 4 THEN 'Liam'
            WHEN 5 THEN 'Ava'
            WHEN 6 THEN 'Noah'
            WHEN 7 THEN 'Sophia'
            WHEN 8 THEN 'James'
            ELSE 'Isabella'
        END,
        ' ',
        CASE MOD(p.X, 10)
            WHEN 0 THEN 'Smith'
            WHEN 1 THEN 'Johnson'
            WHEN 2 THEN 'Brown'
            WHEN 3 THEN 'Taylor'
            WHEN 4 THEN 'Anderson'
            WHEN 5 THEN 'Wilson'
            WHEN 6 THEN 'Clark'
            WHEN 7 THEN 'Lewis'
            WHEN 8 THEN 'Walker'
            ELSE 'Young'
        END
    ) AS reviewer_name,

    -- rating: 1~5 순환
    1 + MOD(n.X, 5) AS rating,

    -- content: 영어 문장으로 구성된 리뷰
    CONCAT(
        'This is an autogenerated review for product #', CAST(p.X AS VARCHAR),
        '. Review number ', CAST(n.X AS VARCHAR), '. ',
        'The product works ',
        CASE MOD(n.X, 5)
            WHEN 0 THEN 'perfectly fine'
            WHEN 1 THEN 'as expected'
            WHEN 2 THEN 'decently well'
            WHEN 3 THEN 'but could be improved'
            ELSE 'poorly compared to others'
        END,
        '. Overall satisfaction level: ',
        CAST(1 + MOD(n.X, 5) AS VARCHAR),
        '/5.'
    ) AS content,

    -- avatar_url: 1~25 랜덤 선택
    CONCAT(
        'http://localhost:8080/images/avatar',
        CAST(1 + FLOOR(RAND() * 25) AS INT),
        '.avif'
    ) AS avatar_url,

    -- created_at: 최근 60일 내 랜덤 날짜
    DATEADD('DAY', -FLOOR(RAND() * 60), CURRENT_TIMESTAMP) AS created_at

FROM SYSTEM_RANGE(1, 10) p   -- product_id 1~10
CROSS JOIN SYSTEM_RANGE(1, 25) n; -- 각 상품당 25개

